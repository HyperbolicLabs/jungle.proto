// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: king/v1/vacancy.proto

package kingv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "jungle/king/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VacancyServiceName is the fully-qualified name of the VacancyService service.
	VacancyServiceName = "king.v1.VacancyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VacancyServiceListVacanciesProcedure is the fully-qualified name of the VacancyService's
	// ListVacancies RPC.
	VacancyServiceListVacanciesProcedure = "/king.v1.VacancyService/ListVacancies"
)

// VacancyServiceClient is a client for the king.v1.VacancyService service.
type VacancyServiceClient interface {
	// a King advertises open baronships in the kingdom
	ListVacancies(context.Context, *connect.Request[v1.ListVacanciesRequest]) (*connect.Response[v1.ListVacanciesResponse], error)
}

// NewVacancyServiceClient constructs a client for the king.v1.VacancyService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVacancyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VacancyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	vacancyServiceMethods := v1.File_king_v1_vacancy_proto.Services().ByName("VacancyService").Methods()
	return &vacancyServiceClient{
		listVacancies: connect.NewClient[v1.ListVacanciesRequest, v1.ListVacanciesResponse](
			httpClient,
			baseURL+VacancyServiceListVacanciesProcedure,
			connect.WithSchema(vacancyServiceMethods.ByName("ListVacancies")),
			connect.WithClientOptions(opts...),
		),
	}
}

// vacancyServiceClient implements VacancyServiceClient.
type vacancyServiceClient struct {
	listVacancies *connect.Client[v1.ListVacanciesRequest, v1.ListVacanciesResponse]
}

// ListVacancies calls king.v1.VacancyService.ListVacancies.
func (c *vacancyServiceClient) ListVacancies(ctx context.Context, req *connect.Request[v1.ListVacanciesRequest]) (*connect.Response[v1.ListVacanciesResponse], error) {
	return c.listVacancies.CallUnary(ctx, req)
}

// VacancyServiceHandler is an implementation of the king.v1.VacancyService service.
type VacancyServiceHandler interface {
	// a King advertises open baronships in the kingdom
	ListVacancies(context.Context, *connect.Request[v1.ListVacanciesRequest]) (*connect.Response[v1.ListVacanciesResponse], error)
}

// NewVacancyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVacancyServiceHandler(svc VacancyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	vacancyServiceMethods := v1.File_king_v1_vacancy_proto.Services().ByName("VacancyService").Methods()
	vacancyServiceListVacanciesHandler := connect.NewUnaryHandler(
		VacancyServiceListVacanciesProcedure,
		svc.ListVacancies,
		connect.WithSchema(vacancyServiceMethods.ByName("ListVacancies")),
		connect.WithHandlerOptions(opts...),
	)
	return "/king.v1.VacancyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VacancyServiceListVacanciesProcedure:
			vacancyServiceListVacanciesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVacancyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVacancyServiceHandler struct{}

func (UnimplementedVacancyServiceHandler) ListVacancies(context.Context, *connect.Request[v1.ListVacanciesRequest]) (*connect.Response[v1.ListVacanciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("king.v1.VacancyService.ListVacancies is not implemented"))
}
